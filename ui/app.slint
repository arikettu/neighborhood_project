component MenuItem {
    in property <string> text;
    in property <bool> selected;

    Rectangle {
        background: selected ? #3a443b : transparent;

        Text {
            text: text;
            color: white;
        }
    }
}

component TimerInput {
    out property <int> input;
    callback create;

    TextInput {
        input-type: number;
        edited => { input = self.text.to-float(); }
        accepted => { create(); }
    }
}

component Timer {
    in property <int> time;
    callback timeout;

    Rectangle {
        background: time > 2000 ? #3a443b : #5c3737;

        Text {
            text: (Math.floor(time / 3600) != 0 ? Math.floor(time / 3600) + ":" : "") + (Math.floor(Math.mod(time, 3600) / 60) < 10 && Math.floor(time / 3600) != 0 ? "0" : "") + Math.floor(Math.mod(time, 3600) / 60) + ":" + (Math.floor(Math.mod(time, 60)) < 10 ? "0" : "") + Math.floor(Math.mod(time, 60));
            horizontal-alignment: left;
        }
    }
}

export component App inherits Window {
    in property <[int]> timers;
    in property <[string]> presets;
    
    property <bool> menu: false;
    property <int> selected: 0;
    
    callback show;
    callback hide;
    callback create(int, int, int);
    callback pause;
    callback cancel;

    function sel_left() { selected = Math.mod((selected - 1), 3); }
    function sel_right() { selected = Math.mod((selected + 1), 3); }

    FocusScope {
        key-pressed(event) => {
            if (event.text == Key.LeftArrow) {
                sel_left();
            } else if (event.text == Key.RightArrow) {
                sel_right();
            }
            accept
        }

        VerticalLayout {
            for i in timers: Timer {
                time: i;
                timeout => { pause(); }
            }
        }
    }
}